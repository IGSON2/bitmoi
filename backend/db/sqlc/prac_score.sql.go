// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: prac_score.sql

package db

import (
	"context"
	"database/sql"
)

const getPracScore = `-- name: GetPracScore :one
SELECT score_id, user_id, stage, pairname, entrytime, position, leverage, outtime, entryprice, quantity, endprice, pnl, roe, remain_balance, created_at FROM prac_score
WHERE user_id = ? AND score_id = ? AND stage = ?
`

type GetPracScoreParams struct {
	UserID  string `json:"user_id"`
	ScoreID string `json:"score_id"`
	Stage   int32  `json:"stage"`
}

func (q *Queries) GetPracScore(ctx context.Context, arg GetPracScoreParams) (PracScore, error) {
	row := q.db.QueryRowContext(ctx, getPracScore, arg.UserID, arg.ScoreID, arg.Stage)
	var i PracScore
	err := row.Scan(
		&i.ScoreID,
		&i.UserID,
		&i.Stage,
		&i.Pairname,
		&i.Entrytime,
		&i.Position,
		&i.Leverage,
		&i.Outtime,
		&i.Entryprice,
		&i.Quantity,
		&i.Endprice,
		&i.Pnl,
		&i.Roe,
		&i.RemainBalance,
		&i.CreatedAt,
	)
	return i, err
}

const getPracScoreToStage = `-- name: GetPracScoreToStage :one
SELECT SUM(pnl) FROM prac_score
WHERE score_id = ? AND user_id = ? AND stage <= ?
`

type GetPracScoreToStageParams struct {
	ScoreID string `json:"score_id"`
	UserID  string `json:"user_id"`
	Stage   int32  `json:"stage"`
}

func (q *Queries) GetPracScoreToStage(ctx context.Context, arg GetPracScoreToStageParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getPracScoreToStage, arg.ScoreID, arg.UserID, arg.Stage)
	var sum interface{}
	err := row.Scan(&sum)
	return sum, err
}

const getPracScoresByScoreID = `-- name: GetPracScoresByScoreID :many
SELECT score_id, user_id, stage, pairname, entrytime, position, leverage, outtime, entryprice, quantity, endprice, pnl, roe, remain_balance, created_at FROM prac_score
WHERE score_id = ? AND user_id = ?
`

type GetPracScoresByScoreIDParams struct {
	ScoreID string `json:"score_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) GetPracScoresByScoreID(ctx context.Context, arg GetPracScoresByScoreIDParams) ([]PracScore, error) {
	rows, err := q.db.QueryContext(ctx, getPracScoresByScoreID, arg.ScoreID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PracScore{}
	for rows.Next() {
		var i PracScore
		if err := rows.Scan(
			&i.ScoreID,
			&i.UserID,
			&i.Stage,
			&i.Pairname,
			&i.Entrytime,
			&i.Position,
			&i.Leverage,
			&i.Outtime,
			&i.Entryprice,
			&i.Quantity,
			&i.Endprice,
			&i.Pnl,
			&i.Roe,
			&i.RemainBalance,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracScoresByUserID = `-- name: GetPracScoresByUserID :many
SELECT score_id, user_id, stage, pairname, entrytime, position, leverage, outtime, entryprice, quantity, endprice, pnl, roe, remain_balance, created_at FROM prac_score
WHERE user_id = ?
ORDER BY score_id DESC 
LIMIT ?
OFFSET ?
`

type GetPracScoresByUserIDParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetPracScoresByUserID(ctx context.Context, arg GetPracScoresByUserIDParams) ([]PracScore, error) {
	rows, err := q.db.QueryContext(ctx, getPracScoresByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PracScore{}
	for rows.Next() {
		var i PracScore
		if err := rows.Scan(
			&i.ScoreID,
			&i.UserID,
			&i.Stage,
			&i.Pairname,
			&i.Entrytime,
			&i.Position,
			&i.Leverage,
			&i.Outtime,
			&i.Entryprice,
			&i.Quantity,
			&i.Endprice,
			&i.Pnl,
			&i.Roe,
			&i.RemainBalance,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracStageLenByScoreID = `-- name: GetPracStageLenByScoreID :one
SELECT COUNT(stage) FROM prac_score
WHERE score_id = ? AND user_id = ?
`

type GetPracStageLenByScoreIDParams struct {
	ScoreID string `json:"score_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) GetPracStageLenByScoreID(ctx context.Context, arg GetPracStageLenByScoreIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPracStageLenByScoreID, arg.ScoreID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertPracScore = `-- name: InsertPracScore :execresult
INSERT INTO prac_score (
    score_id,
    user_id,
    stage,
    pairname,
    entrytime,
    position,
    leverage,
    outtime,
    quantity,
    entryprice,
    endprice,
    pnl,
    roe,
    remain_balance
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type InsertPracScoreParams struct {
	ScoreID       string  `json:"score_id"`
	UserID        string  `json:"user_id"`
	Stage         int32   `json:"stage"`
	Pairname      string  `json:"pairname"`
	Entrytime     string  `json:"entrytime"`
	Position      string  `json:"position"`
	Leverage      int32   `json:"leverage"`
	Outtime       int64   `json:"outtime"`
	Quantity      float64 `json:"quantity"`
	Entryprice    float64 `json:"entryprice"`
	Endprice      float64 `json:"endprice"`
	Pnl           float64 `json:"pnl"`
	Roe           float64 `json:"roe"`
	RemainBalance float64 `json:"remain_balance"`
}

func (q *Queries) InsertPracScore(ctx context.Context, arg InsertPracScoreParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertPracScore,
		arg.ScoreID,
		arg.UserID,
		arg.Stage,
		arg.Pairname,
		arg.Entrytime,
		arg.Position,
		arg.Leverage,
		arg.Outtime,
		arg.Quantity,
		arg.Entryprice,
		arg.Endprice,
		arg.Pnl,
		arg.Roe,
		arg.RemainBalance,
	)
}

const updatePracScore = `-- name: UpdatePracScore :execresult
UPDATE prac_score SET outtime = ?, endprice = ?, pnl = ?, roe = ?, remain_balance = ?
WHERE user_id = ? AND score_id = ? AND stage = ?
`

type UpdatePracScoreParams struct {
	Outtime       int64   `json:"outtime"`
	Endprice      float64 `json:"endprice"`
	Pnl           float64 `json:"pnl"`
	Roe           float64 `json:"roe"`
	RemainBalance float64 `json:"remain_balance"`
	UserID        string  `json:"user_id"`
	ScoreID       string  `json:"score_id"`
	Stage         int32   `json:"stage"`
}

func (q *Queries) UpdatePracScore(ctx context.Context, arg UpdatePracScoreParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePracScore,
		arg.Outtime,
		arg.Endprice,
		arg.Pnl,
		arg.Roe,
		arg.RemainBalance,
		arg.UserID,
		arg.ScoreID,
		arg.Stage,
	)
}
