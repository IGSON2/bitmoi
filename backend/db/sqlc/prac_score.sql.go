// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: prac_score.sql

package db

import (
	"context"
	"database/sql"
)

const getPracScore = `-- name: GetPracScore :one
SELECT score_id, user_id, stage, pairname, entrytime, position, leverage, outtime, entryprice, quantity, endprice, pnl, roe, settled_at, created_at FROM prac_score
WHERE user_id = ? AND score_id = ? AND pairname = ?
`

type GetPracScoreParams struct {
	UserID   string `json:"user_id"`
	ScoreID  string `json:"score_id"`
	Pairname string `json:"pairname"`
}

func (q *Queries) GetPracScore(ctx context.Context, arg GetPracScoreParams) (PracScore, error) {
	row := q.db.QueryRowContext(ctx, getPracScore, arg.UserID, arg.ScoreID, arg.Pairname)
	var i PracScore
	err := row.Scan(
		&i.ScoreID,
		&i.UserID,
		&i.Stage,
		&i.Pairname,
		&i.Entrytime,
		&i.Position,
		&i.Leverage,
		&i.Outtime,
		&i.Entryprice,
		&i.Quantity,
		&i.Endprice,
		&i.Pnl,
		&i.Roe,
		&i.SettledAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPracScoreToStage = `-- name: GetPracScoreToStage :one
SELECT SUM(pnl) FROM prac_score
WHERE score_id = ? AND user_id = ? AND stage <= ?
`

type GetPracScoreToStageParams struct {
	ScoreID string `json:"score_id"`
	UserID  string `json:"user_id"`
	Stage   int32  `json:"stage"`
}

func (q *Queries) GetPracScoreToStage(ctx context.Context, arg GetPracScoreToStageParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getPracScoreToStage, arg.ScoreID, arg.UserID, arg.Stage)
	var sum interface{}
	err := row.Scan(&sum)
	return sum, err
}

const getPracScoresByStage = `-- name: GetPracScoresByStage :one
SELECT score_id, user_id, stage, pairname, entrytime, position, leverage, outtime, entryprice, quantity, endprice, pnl, roe, settled_at, created_at FROM prac_score
WHERE score_id = ? AND user_id = ? AND stage = ?
`

type GetPracScoresByStageParams struct {
	ScoreID string `json:"score_id"`
	UserID  string `json:"user_id"`
	Stage   int32  `json:"stage"`
}

func (q *Queries) GetPracScoresByStage(ctx context.Context, arg GetPracScoresByStageParams) (PracScore, error) {
	row := q.db.QueryRowContext(ctx, getPracScoresByStage, arg.ScoreID, arg.UserID, arg.Stage)
	var i PracScore
	err := row.Scan(
		&i.ScoreID,
		&i.UserID,
		&i.Stage,
		&i.Pairname,
		&i.Entrytime,
		&i.Position,
		&i.Leverage,
		&i.Outtime,
		&i.Entryprice,
		&i.Quantity,
		&i.Endprice,
		&i.Pnl,
		&i.Roe,
		&i.SettledAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPracScoresByUserID = `-- name: GetPracScoresByUserID :many
SELECT score_id, user_id, stage, pairname, entrytime, position, leverage, outtime, entryprice, quantity, endprice, pnl, roe, settled_at, created_at FROM prac_score
WHERE user_id = ?
ORDER BY score_id DESC 
LIMIT ?
OFFSET ?
`

type GetPracScoresByUserIDParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetPracScoresByUserID(ctx context.Context, arg GetPracScoresByUserIDParams) ([]PracScore, error) {
	rows, err := q.db.QueryContext(ctx, getPracScoresByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PracScore{}
	for rows.Next() {
		var i PracScore
		if err := rows.Scan(
			&i.ScoreID,
			&i.UserID,
			&i.Stage,
			&i.Pairname,
			&i.Entrytime,
			&i.Position,
			&i.Leverage,
			&i.Outtime,
			&i.Entryprice,
			&i.Quantity,
			&i.Endprice,
			&i.Pnl,
			&i.Roe,
			&i.SettledAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracStageLenByScoreID = `-- name: GetPracStageLenByScoreID :one
SELECT COUNT(stage) FROM prac_score
WHERE score_id = ? AND user_id = ?
`

type GetPracStageLenByScoreIDParams struct {
	ScoreID string `json:"score_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) GetPracStageLenByScoreID(ctx context.Context, arg GetPracStageLenByScoreIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPracStageLenByScoreID, arg.ScoreID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUnsettledPracScores = `-- name: GetUnsettledPracScores :many
SELECT score_id, user_id, stage, pairname, entrytime, position, leverage, outtime, entryprice, quantity, endprice, pnl, roe, settled_at, created_at FROM prac_score
WHERE user_id = ? AND pnl <> 0 AND outtime = 0 AND settled_at IS NULL
`

func (q *Queries) GetUnsettledPracScores(ctx context.Context, userID string) ([]PracScore, error) {
	rows, err := q.db.QueryContext(ctx, getUnsettledPracScores, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PracScore{}
	for rows.Next() {
		var i PracScore
		if err := rows.Scan(
			&i.ScoreID,
			&i.UserID,
			&i.Stage,
			&i.Pairname,
			&i.Entrytime,
			&i.Position,
			&i.Leverage,
			&i.Outtime,
			&i.Entryprice,
			&i.Quantity,
			&i.Endprice,
			&i.Pnl,
			&i.Roe,
			&i.SettledAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPracScoreSummary = `-- name: GetUserPracScoreSummary :one
SELECT 
  SUM(pnl) AS total_pnl,
  COUNT(CASE WHEN s.pnl > 0 THEN 1 END) AS total_win,
  COUNT(CASE WHEN s.pnl < 0 THEN 1 END) AS total_lose,
  SUM(CASE WHEN s.created_at >= CURDATE() - INTERVAL 1 MONTH THEN s.pnl ELSE 0 END) AS monthly_pnl,
  COUNT(CASE WHEN s.created_at >= CURDATE() - INTERVAL 1 MONTH AND s.pnl > 0 THEN 1 END) AS monthly_win,
  COUNT(CASE WHEN s.created_at >= CURDATE() - INTERVAL 1 MONTH AND s.pnl < 0 THEN 1 END) AS monthly_lose
FROM prac_score s
JOIN users u ON s.user_id = u.user_id
WHERE u.nickname = ?
`

type GetUserPracScoreSummaryRow struct {
	TotalPnl    interface{} `json:"total_pnl"`
	TotalWin    int64       `json:"total_win"`
	TotalLose   int64       `json:"total_lose"`
	MonthlyPnl  interface{} `json:"monthly_pnl"`
	MonthlyWin  int64       `json:"monthly_win"`
	MonthlyLose int64       `json:"monthly_lose"`
}

func (q *Queries) GetUserPracScoreSummary(ctx context.Context, nickname sql.NullString) (GetUserPracScoreSummaryRow, error) {
	row := q.db.QueryRowContext(ctx, getUserPracScoreSummary, nickname)
	var i GetUserPracScoreSummaryRow
	err := row.Scan(
		&i.TotalPnl,
		&i.TotalWin,
		&i.TotalLose,
		&i.MonthlyPnl,
		&i.MonthlyWin,
		&i.MonthlyLose,
	)
	return i, err
}

const insertPracScore = `-- name: InsertPracScore :execresult
INSERT INTO prac_score (
    score_id,
    user_id,
    stage,
    pairname,
    entrytime,
    position,
    leverage,
    outtime,
    quantity,
    entryprice,
    endprice,
    pnl,
    roe
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type InsertPracScoreParams struct {
	ScoreID    string  `json:"score_id"`
	UserID     string  `json:"user_id"`
	Stage      int32   `json:"stage"`
	Pairname   string  `json:"pairname"`
	Entrytime  string  `json:"entrytime"`
	Position   string  `json:"position"`
	Leverage   int32   `json:"leverage"`
	Outtime    int64   `json:"outtime"`
	Quantity   float64 `json:"quantity"`
	Entryprice float64 `json:"entryprice"`
	Endprice   float64 `json:"endprice"`
	Pnl        float64 `json:"pnl"`
	Roe        float64 `json:"roe"`
}

func (q *Queries) InsertPracScore(ctx context.Context, arg InsertPracScoreParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertPracScore,
		arg.ScoreID,
		arg.UserID,
		arg.Stage,
		arg.Pairname,
		arg.Entrytime,
		arg.Position,
		arg.Leverage,
		arg.Outtime,
		arg.Quantity,
		arg.Entryprice,
		arg.Endprice,
		arg.Pnl,
		arg.Roe,
	)
}

const updatePracScore = `-- name: UpdatePracScore :execresult
UPDATE prac_score SET outtime = ?, endprice = ?, pnl = ?, roe = ?
WHERE user_id = ? AND score_id = ? AND stage = ?
`

type UpdatePracScoreParams struct {
	Outtime  int64   `json:"outtime"`
	Endprice float64 `json:"endprice"`
	Pnl      float64 `json:"pnl"`
	Roe      float64 `json:"roe"`
	UserID   string  `json:"user_id"`
	ScoreID  string  `json:"score_id"`
	Stage    int32   `json:"stage"`
}

func (q *Queries) UpdatePracScore(ctx context.Context, arg UpdatePracScoreParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePracScore,
		arg.Outtime,
		arg.Endprice,
		arg.Pnl,
		arg.Roe,
		arg.UserID,
		arg.ScoreID,
		arg.Stage,
	)
}

const updatePracScoreSettledAt = `-- name: UpdatePracScoreSettledAt :execresult
UPDATE prac_score SET settled_at = ?
WHERE user_id = ? AND score_id = ?
`

type UpdatePracScoreSettledAtParams struct {
	SettledAt sql.NullTime `json:"settled_at"`
	UserID    string       `json:"user_id"`
	ScoreID   string       `json:"score_id"`
}

func (q *Queries) UpdatePracScoreSettledAt(ctx context.Context, arg UpdatePracScoreSettledAtParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePracScoreSettledAt, arg.SettledAt, arg.UserID, arg.ScoreID)
}
