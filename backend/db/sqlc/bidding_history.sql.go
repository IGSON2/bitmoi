// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: bidding_history.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createBiddingHistory = `-- name: CreateBiddingHistory :execresult
INSERT INTO bidding_history (
    user_id,
    amount,
    location,
    tx_hash,
    expires_at
) VALUES (
    ?, ?, ?, ?,?
)
`

type CreateBiddingHistoryParams struct {
	UserID    string    `json:"user_id"`
	Amount    int64     `json:"amount"`
	Location  string    `json:"location"`
	TxHash    string    `json:"tx_hash"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateBiddingHistory(ctx context.Context, arg CreateBiddingHistoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBiddingHistory,
		arg.UserID,
		arg.Amount,
		arg.Location,
		arg.TxHash,
		arg.ExpiresAt,
	)
}

const getHighestBidder = `-- name: GetHighestBidder :one
SELECT tx_hash, user_id, amount, location, expires_at, created_at FROM bidding_history 
WHERE location = ? AND expires_at >= ? AND expires_at < now()
ORDER BY amount DESC
LIMIT 1
`

type GetHighestBidderParams struct {
	Location  string    `json:"location"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) GetHighestBidder(ctx context.Context, arg GetHighestBidderParams) (BiddingHistory, error) {
	row := q.db.QueryRowContext(ctx, getHighestBidder, arg.Location, arg.ExpiresAt)
	var i BiddingHistory
	err := row.Scan(
		&i.TxHash,
		&i.UserID,
		&i.Amount,
		&i.Location,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getHistoryByLocation = `-- name: GetHistoryByLocation :many
SELECT tx_hash, user_id, amount, location, expires_at, created_at FROM bidding_history 
WHERE location = ? AND expires_at >= now()
ORDER BY amount DESC 
LIMIT ?
`

type GetHistoryByLocationParams struct {
	Location string `json:"location"`
	Limit    int32  `json:"limit"`
}

func (q *Queries) GetHistoryByLocation(ctx context.Context, arg GetHistoryByLocationParams) ([]BiddingHistory, error) {
	rows, err := q.db.QueryContext(ctx, getHistoryByLocation, arg.Location, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BiddingHistory{}
	for rows.Next() {
		var i BiddingHistory
		if err := rows.Scan(
			&i.TxHash,
			&i.UserID,
			&i.Amount,
			&i.Location,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHistoryByUser = `-- name: GetHistoryByUser :many
SELECT tx_hash, user_id, amount, location, expires_at, created_at FROM bidding_history 
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) GetHistoryByUser(ctx context.Context, userID string) ([]BiddingHistory, error) {
	rows, err := q.db.QueryContext(ctx, getHistoryByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BiddingHistory{}
	for rows.Next() {
		var i BiddingHistory
		if err := rows.Scan(
			&i.TxHash,
			&i.UserID,
			&i.Amount,
			&i.Location,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
