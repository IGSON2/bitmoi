// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: Candles.sql

package db

import (
	"context"
	"database/sql"
)

const counting15mCandles = `-- name: Counting15mCandles :one
SELECT count(time) FROM candles_15m
`

func (q *Queries) Counting15mCandles(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, counting15mCandles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const counting1dCandles = `-- name: Counting1dCandles :one
SELECT count(time) FROM candles_1d
`

func (q *Queries) Counting1dCandles(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, counting1dCandles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const counting1hCandles = `-- name: Counting1hCandles :one
SELECT count(time) FROM candles_1h
`

func (q *Queries) Counting1hCandles(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, counting1hCandles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const counting4hCandles = `-- name: Counting4hCandles :one
SELECT count(time) FROM candles_4h
`

func (q *Queries) Counting4hCandles(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, counting4hCandles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const get15mCandles = `-- name: Get15mCandles :many
SELECT id, name, open, close, high, low, time, volume, color FROM candles_15m 
WHERE name = ? 
ORDER BY time ASC 
LIMIT ?
`

type Get15mCandlesParams struct {
	Name  string `json:"name"`
	Limit int32  `json:"limit"`
}

func (q *Queries) Get15mCandles(ctx context.Context, arg Get15mCandlesParams) ([]Candles15m, error) {
	rows, err := q.db.QueryContext(ctx, get15mCandles, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Candles15m{}
	for rows.Next() {
		var i Candles15m
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Open,
			&i.Close,
			&i.High,
			&i.Low,
			&i.Time,
			&i.Volume,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get1dCandles = `-- name: Get1dCandles :many
SELECT id, name, open, close, high, low, time, volume, color FROM candles_1d 
WHERE name = ? 
ORDER BY time ASC 
LIMIT ?
`

type Get1dCandlesParams struct {
	Name  string `json:"name"`
	Limit int32  `json:"limit"`
}

func (q *Queries) Get1dCandles(ctx context.Context, arg Get1dCandlesParams) ([]Candles1d, error) {
	rows, err := q.db.QueryContext(ctx, get1dCandles, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Candles1d{}
	for rows.Next() {
		var i Candles1d
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Open,
			&i.Close,
			&i.High,
			&i.Low,
			&i.Time,
			&i.Volume,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get1hCandles = `-- name: Get1hCandles :many
SELECT id, name, open, close, high, low, time, volume, color FROM candles_1h 
WHERE name = ? 
ORDER BY time ASC 
LIMIT ?
`

type Get1hCandlesParams struct {
	Name  string `json:"name"`
	Limit int32  `json:"limit"`
}

func (q *Queries) Get1hCandles(ctx context.Context, arg Get1hCandlesParams) ([]Candles1h, error) {
	rows, err := q.db.QueryContext(ctx, get1hCandles, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Candles1h{}
	for rows.Next() {
		var i Candles1h
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Open,
			&i.Close,
			&i.High,
			&i.Low,
			&i.Time,
			&i.Volume,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get4hCandles = `-- name: Get4hCandles :many
SELECT id, name, open, close, high, low, time, volume, color FROM candles_4h 
WHERE name = ? 
ORDER BY time ASC 
LIMIT ?
`

type Get4hCandlesParams struct {
	Name  string `json:"name"`
	Limit int32  `json:"limit"`
}

func (q *Queries) Get4hCandles(ctx context.Context, arg Get4hCandlesParams) ([]Candles4h, error) {
	rows, err := q.db.QueryContext(ctx, get4hCandles, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Candles4h{}
	for rows.Next() {
		var i Candles4h
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Open,
			&i.Close,
			&i.High,
			&i.Low,
			&i.Time,
			&i.Volume,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOne15mCandle = `-- name: GetOne15mCandle :one
SELECT id, name, open, close, high, low, time, volume, color FROM candles_15m
WHERE name = ? AND id = ?
`

type GetOne15mCandleParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) GetOne15mCandle(ctx context.Context, arg GetOne15mCandleParams) (Candles15m, error) {
	row := q.db.QueryRowContext(ctx, getOne15mCandle, arg.Name, arg.ID)
	var i Candles15m
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Open,
		&i.Close,
		&i.High,
		&i.Low,
		&i.Time,
		&i.Volume,
		&i.Color,
	)
	return i, err
}

const getOne1dCandle = `-- name: GetOne1dCandle :one
SELECT id, name, open, close, high, low, time, volume, color FROM candles_1d
WHERE name = ? AND id = ?
`

type GetOne1dCandleParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) GetOne1dCandle(ctx context.Context, arg GetOne1dCandleParams) (Candles1d, error) {
	row := q.db.QueryRowContext(ctx, getOne1dCandle, arg.Name, arg.ID)
	var i Candles1d
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Open,
		&i.Close,
		&i.High,
		&i.Low,
		&i.Time,
		&i.Volume,
		&i.Color,
	)
	return i, err
}

const getOne1hCandle = `-- name: GetOne1hCandle :one
SELECT id, name, open, close, high, low, time, volume, color FROM candles_1h
WHERE name = ? AND id = ?
`

type GetOne1hCandleParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) GetOne1hCandle(ctx context.Context, arg GetOne1hCandleParams) (Candles1h, error) {
	row := q.db.QueryRowContext(ctx, getOne1hCandle, arg.Name, arg.ID)
	var i Candles1h
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Open,
		&i.Close,
		&i.High,
		&i.Low,
		&i.Time,
		&i.Volume,
		&i.Color,
	)
	return i, err
}

const getOne4hCandle = `-- name: GetOne4hCandle :one
SELECT id, name, open, close, high, low, time, volume, color FROM candles_4h
WHERE name = ? AND id = ?
`

type GetOne4hCandleParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) GetOne4hCandle(ctx context.Context, arg GetOne4hCandleParams) (Candles4h, error) {
	row := q.db.QueryRowContext(ctx, getOne4hCandle, arg.Name, arg.ID)
	var i Candles4h
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Open,
		&i.Close,
		&i.High,
		&i.Low,
		&i.Time,
		&i.Volume,
		&i.Color,
	)
	return i, err
}

const insert15mCandles = `-- name: Insert15mCandles :execresult
INSERT INTO candles_15m (
    name,
    open,
    close,
    high,
    low,
    time,
    volume,
    color
) VALUES (
  ?,?,?,?,?,?,?,?
)
`

type Insert15mCandlesParams struct {
	Name   string  `json:"name"`
	Open   float64 `json:"open"`
	Close  float64 `json:"close"`
	High   float64 `json:"high"`
	Low    float64 `json:"low"`
	Time   int64   `json:"time"`
	Volume float64 `json:"volume"`
	Color  string  `json:"color"`
}

func (q *Queries) Insert15mCandles(ctx context.Context, arg Insert15mCandlesParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insert15mCandles,
		arg.Name,
		arg.Open,
		arg.Close,
		arg.High,
		arg.Low,
		arg.Time,
		arg.Volume,
		arg.Color,
	)
}

const insert1dCandles = `-- name: Insert1dCandles :execresult
INSERT INTO candles_1d (
    name,
    open,
    close,
    high,
    low,
    time,
    volume,
    color
) VALUES (
  ?,?,?,?,?,?,?,?
)
`

type Insert1dCandlesParams struct {
	Name   string  `json:"name"`
	Open   float64 `json:"open"`
	Close  float64 `json:"close"`
	High   float64 `json:"high"`
	Low    float64 `json:"low"`
	Time   int64   `json:"time"`
	Volume float64 `json:"volume"`
	Color  string  `json:"color"`
}

func (q *Queries) Insert1dCandles(ctx context.Context, arg Insert1dCandlesParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insert1dCandles,
		arg.Name,
		arg.Open,
		arg.Close,
		arg.High,
		arg.Low,
		arg.Time,
		arg.Volume,
		arg.Color,
	)
}

const insert1hCandles = `-- name: Insert1hCandles :execresult
INSERT INTO candles_1h (
    name,
    open,
    close,
    high,
    low,
    time,
    volume,
    color
) VALUES (
  ?,?,?,?,?,?,?,?
)
`

type Insert1hCandlesParams struct {
	Name   string  `json:"name"`
	Open   float64 `json:"open"`
	Close  float64 `json:"close"`
	High   float64 `json:"high"`
	Low    float64 `json:"low"`
	Time   int64   `json:"time"`
	Volume float64 `json:"volume"`
	Color  string  `json:"color"`
}

func (q *Queries) Insert1hCandles(ctx context.Context, arg Insert1hCandlesParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insert1hCandles,
		arg.Name,
		arg.Open,
		arg.Close,
		arg.High,
		arg.Low,
		arg.Time,
		arg.Volume,
		arg.Color,
	)
}

const insert4hCandles = `-- name: Insert4hCandles :execresult
INSERT INTO candles_4h (
    name,
    open,
    close,
    high,
    low,
    time,
    volume,
    color
) VALUES (
  ?,?,?,?,?,?,?,?
)
`

type Insert4hCandlesParams struct {
	Name   string  `json:"name"`
	Open   float64 `json:"open"`
	Close  float64 `json:"close"`
	High   float64 `json:"high"`
	Low    float64 `json:"low"`
	Time   int64   `json:"time"`
	Volume float64 `json:"volume"`
	Color  string  `json:"color"`
}

func (q *Queries) Insert4hCandles(ctx context.Context, arg Insert4hCandlesParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insert4hCandles,
		arg.Name,
		arg.Open,
		arg.Close,
		arg.High,
		arg.Low,
		arg.Time,
		arg.Volume,
		arg.Color,
	)
}
