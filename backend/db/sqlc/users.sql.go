// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
    user_id,
    oauth_uid,
    full_name,
    hashed_password,
    email,
    photo_url
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	UserID         string         `json:"user_id"`
	OauthUid       sql.NullString `json:"oauth_uid"`
	FullName       string         `json:"full_name"`
	HashedPassword string         `json:"hashed_password"`
	Email          string         `json:"email"`
	PhotoUrl       sql.NullString `json:"photo_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.UserID,
		arg.OauthUid,
		arg.FullName,
		arg.HashedPassword,
		arg.Email,
		arg.PhotoUrl,
	)
}

const getLastUser = `-- name: GetLastUser :one
SELECT user_id, oauth_uid, full_name, hashed_password, email, password_changed_at, created_at, photo_url, metamask_address, is_email_verified FROM users
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getLastUser)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.OauthUid,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.PhotoUrl,
		&i.MetamaskAddress,
		&i.IsEmailVerified,
	)
	return i, err
}

const getRandomUser = `-- name: GetRandomUser :one
SELECT user_id, oauth_uid, full_name, hashed_password, email, password_changed_at, created_at, photo_url, metamask_address, is_email_verified FROM users
ORDER BY RAND()
LIMIT 1
`

func (q *Queries) GetRandomUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getRandomUser)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.OauthUid,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.PhotoUrl,
		&i.MetamaskAddress,
		&i.IsEmailVerified,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, oauth_uid, full_name, hashed_password, email, password_changed_at, created_at, photo_url, metamask_address, is_email_verified FROM users
WHERE user_id = ?
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.OauthUid,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.PhotoUrl,
		&i.MetamaskAddress,
		&i.IsEmailVerified,
	)
	return i, err
}

const getUserByFullName = `-- name: GetUserByFullName :one
SELECT user_id, oauth_uid, full_name, hashed_password, email, password_changed_at, created_at, photo_url, metamask_address, is_email_verified FROM users
WHERE full_name = ?
`

func (q *Queries) GetUserByFullName(ctx context.Context, fullName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByFullName, fullName)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.OauthUid,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.PhotoUrl,
		&i.MetamaskAddress,
		&i.IsEmailVerified,
	)
	return i, err
}

const getUserMetamaskAddress = `-- name: GetUserMetamaskAddress :one
SELECT metamask_address FROM users
WHERE user_id = ?
`

func (q *Queries) GetUserMetamaskAddress(ctx context.Context, userID string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getUserMetamaskAddress, userID)
	var metamask_address sql.NullString
	err := row.Scan(&metamask_address)
	return metamask_address, err
}

const updateUserEmailVerified = `-- name: UpdateUserEmailVerified :execresult
UPDATE users SET is_email_verified = ?
WHERE user_id = ?
`

type UpdateUserEmailVerifiedParams struct {
	IsEmailVerified bool   `json:"is_email_verified"`
	UserID          string `json:"user_id"`
}

func (q *Queries) UpdateUserEmailVerified(ctx context.Context, arg UpdateUserEmailVerifiedParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUserEmailVerified, arg.IsEmailVerified, arg.UserID)
}

const updateUserMetamaskAddress = `-- name: UpdateUserMetamaskAddress :execresult
UPDATE users SET metamask_address = ?
WHERE user_id = ?
`

type UpdateUserMetamaskAddressParams struct {
	MetamaskAddress sql.NullString `json:"metamask_address"`
	UserID          string         `json:"user_id"`
}

func (q *Queries) UpdateUserMetamaskAddress(ctx context.Context, arg UpdateUserMetamaskAddressParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUserMetamaskAddress, arg.MetamaskAddress, arg.UserID)
}

const updateUserPhotoURL = `-- name: UpdateUserPhotoURL :execresult
UPDATE users SET photo_url = ?
WHERE user_id = ?
`

type UpdateUserPhotoURLParams struct {
	PhotoUrl sql.NullString `json:"photo_url"`
	UserID   string         `json:"user_id"`
}

func (q *Queries) UpdateUserPhotoURL(ctx context.Context, arg UpdateUserPhotoURLParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUserPhotoURL, arg.PhotoUrl, arg.UserID)
}
