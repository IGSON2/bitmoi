// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admin.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getAdminPracScores = `-- name: GetAdminPracScores :many
SELECT id, user_id, nickname,
(SELECT score_id, user_id, stage, pairname, entrytime, position, leverage, outtime, entryprice, quantity, endprice, pnl, roe, settled_at, created_at FROM prac_score WHERE users.user_id = prac_score.user_id)
FROM users
`

type GetAdminPracScoresRow struct {
	ID       int64  `json:"id"`
	UserID   string `json:"user_id"`
	Nickname string `json:"nickname"`
	ScoreID  string `json:"score_id"`
}

func (q *Queries) GetAdminPracScores(ctx context.Context) ([]GetAdminPracScoresRow, error) {
	rows, err := q.db.QueryContext(ctx, getAdminPracScores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAdminPracScoresRow{}
	for rows.Next() {
		var i GetAdminPracScoresRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Nickname,
			&i.ScoreID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAdminUsers = `-- name: GetAdminUsers :many
SELECT id, user_id, nickname, prac_balance, wmoi_balance, recommender_code, created_at, last_accessed_at,
(SELECT COUNT(*) FROM accumulation_history WHERE users.user_id = accumulation_history.to_user AND accumulation_history.title='출석 체크 보상') AS attendance,
(SELECT COUNT(*) FROM recommend_history WHERE users.user_id = recommend_history.recommender) AS referral,
(SELECT COUNT(*) FROM prac_score WHERE users.user_id = prac_score.user_id AND prac_score.pnl >= 0) AS prac_win,
(SELECT COUNT(*) FROM prac_score WHERE users.user_id = prac_score.user_id AND prac_score.pnl < 0) AS prac_lose,
(SELECT COUNT(*) FROM comp_score WHERE users.user_id = comp_score.user_id AND comp_score.pnl >= 0) AS comp_win,
(SELECT COUNT(*) FROM comp_score WHERE users.user_id = comp_score.user_id AND comp_score.pnl < 0) AS comp_lose
FROM users
LIMIT ? OFFSET ?
`

type GetAdminUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAdminUsersRow struct {
	ID              int64        `json:"id"`
	UserID          string       `json:"user_id"`
	Nickname        string       `json:"nickname"`
	PracBalance     float64      `json:"prac_balance"`
	WmoiBalance     float64      `json:"wmoi_balance"`
	RecommenderCode string       `json:"recommender_code"`
	CreatedAt       time.Time    `json:"created_at"`
	LastAccessedAt  sql.NullTime `json:"last_accessed_at"`
	Attendance      int64        `json:"attendance"`
	Referral        int64        `json:"referral"`
	PracWin         int64        `json:"prac_win"`
	PracLose        int64        `json:"prac_lose"`
	CompWin         int64        `json:"comp_win"`
	CompLose        int64        `json:"comp_lose"`
}

func (q *Queries) GetAdminUsers(ctx context.Context, arg GetAdminUsersParams) ([]GetAdminUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAdminUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAdminUsersRow{}
	for rows.Next() {
		var i GetAdminUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Nickname,
			&i.PracBalance,
			&i.WmoiBalance,
			&i.RecommenderCode,
			&i.CreatedAt,
			&i.LastAccessedAt,
			&i.Attendance,
			&i.Referral,
			&i.PracWin,
			&i.PracLose,
			&i.CompWin,
			&i.CompLose,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
