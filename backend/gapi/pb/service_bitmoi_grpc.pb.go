// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: service_bitmoi.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bitmoi_GetCandles_FullMethodName = "/pb.Bitmoi/GetCandles"
)

// BitmoiClient is the client API for Bitmoi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BitmoiClient interface {
	GetCandles(ctx context.Context, in *GetCandlesRequest, opts ...grpc.CallOption) (*GetCandlesResponse, error)
}

type bitmoiClient struct {
	cc grpc.ClientConnInterface
}

func NewBitmoiClient(cc grpc.ClientConnInterface) BitmoiClient {
	return &bitmoiClient{cc}
}

func (c *bitmoiClient) GetCandles(ctx context.Context, in *GetCandlesRequest, opts ...grpc.CallOption) (*GetCandlesResponse, error) {
	out := new(GetCandlesResponse)
	err := c.cc.Invoke(ctx, Bitmoi_GetCandles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BitmoiServer is the server API for Bitmoi service.
// All implementations must embed UnimplementedBitmoiServer
// for forward compatibility
type BitmoiServer interface {
	GetCandles(context.Context, *GetCandlesRequest) (*GetCandlesResponse, error)
	mustEmbedUnimplementedBitmoiServer()
}

// UnimplementedBitmoiServer must be embedded to have forward compatible implementations.
type UnimplementedBitmoiServer struct {
}

func (UnimplementedBitmoiServer) GetCandles(context.Context, *GetCandlesRequest) (*GetCandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandles not implemented")
}
func (UnimplementedBitmoiServer) mustEmbedUnimplementedBitmoiServer() {}

// UnsafeBitmoiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BitmoiServer will
// result in compilation errors.
type UnsafeBitmoiServer interface {
	mustEmbedUnimplementedBitmoiServer()
}

func RegisterBitmoiServer(s grpc.ServiceRegistrar, srv BitmoiServer) {
	s.RegisterService(&Bitmoi_ServiceDesc, srv)
}

func _Bitmoi_GetCandles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitmoiServer).GetCandles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bitmoi_GetCandles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitmoiServer).GetCandles(ctx, req.(*GetCandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bitmoi_ServiceDesc is the grpc.ServiceDesc for Bitmoi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bitmoi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Bitmoi",
	HandlerType: (*BitmoiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCandles",
			Handler:    _Bitmoi_GetCandles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_bitmoi.proto",
}
