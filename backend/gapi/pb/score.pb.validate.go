// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: score.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ScoreRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScoreRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScoreRequestMultiError, or
// nil if none found.
func (m *ScoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ScoreRequest_Mode_InLookup[m.GetMode()]; !ok {
		err := ScoreRequestValidationError{
			field:  "Mode",
			reason: "value must be in list [practice competition]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUserId()) < 1 {
		err := ScoreRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetName()) < 1 {
		err := ScoreRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetStage(); val <= 0 || val > 10 {
		err := ScoreRequestValidationError{
			field:  "Stage",
			reason: "value must be inside range (0, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsLong

	if m.GetEntryPrice() <= 0 {
		err := ScoreRequestValidationError{
			field:  "EntryPrice",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQuantity() <= 0 {
		err := ScoreRequestValidationError{
			field:  "Quantity",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProfitPrice() < 0 {
		err := ScoreRequestValidationError{
			field:  "ProfitPrice",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLossPrice() < 0 {
		err := ScoreRequestValidationError{
			field:  "LossPrice",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLeverage(); val <= 0 || val > 100 {
		err := ScoreRequestValidationError{
			field:  "Leverage",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBalance() <= 0 {
		err := ScoreRequestValidationError{
			field:  "Balance",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetIdentifier()) < 1 {
		err := ScoreRequestValidationError{
			field:  "Identifier",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetScoreId()) < 1 {
		err := ScoreRequestValidationError{
			field:  "ScoreId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetWaitingTerm(); val <= 0 || val > 30 {
		err := ScoreRequestValidationError{
			field:  "WaitingTerm",
			reason: "value must be inside range (0, 30]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ScoreRequestMultiError(errors)
	}

	return nil
}

// ScoreRequestMultiError is an error wrapping multiple validation errors
// returned by ScoreRequest.ValidateAll() if the designated constraints aren't met.
type ScoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScoreRequestMultiError) AllErrors() []error { return m }

// ScoreRequestValidationError is the validation error returned by
// ScoreRequest.Validate if the designated constraints aren't met.
type ScoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScoreRequestValidationError) ErrorName() string { return "ScoreRequestValidationError" }

// Error satisfies the builtin error interface
func (e ScoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScoreRequestValidationError{}

var _ScoreRequest_Mode_InLookup = map[string]struct{}{
	"practice":    {},
	"competition": {},
}

// Validate checks the field values on ScoreResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScoreResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScoreResponseMultiError, or
// nil if none found.
func (m *ScoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOriginChart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScoreResponseValidationError{
					field:  "OriginChart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScoreResponseValidationError{
					field:  "OriginChart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginChart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScoreResponseValidationError{
				field:  "OriginChart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResultChart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScoreResponseValidationError{
					field:  "ResultChart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScoreResponseValidationError{
					field:  "ResultChart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResultChart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScoreResponseValidationError{
				field:  "ResultChart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScoreResponseValidationError{
					field:  "Score",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScoreResponseValidationError{
					field:  "Score",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScoreResponseValidationError{
				field:  "Score",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScoreResponseMultiError(errors)
	}

	return nil
}

// ScoreResponseMultiError is an error wrapping multiple validation errors
// returned by ScoreResponse.ValidateAll() if the designated constraints
// aren't met.
type ScoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScoreResponseMultiError) AllErrors() []error { return m }

// ScoreResponseValidationError is the validation error returned by
// ScoreResponse.Validate if the designated constraints aren't met.
type ScoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScoreResponseValidationError) ErrorName() string { return "ScoreResponseValidationError" }

// Error satisfies the builtin error interface
func (e ScoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScoreResponseValidationError{}

// Validate checks the field values on Score with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Score) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Score with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ScoreMultiError, or nil if none found.
func (m *Score) ValidateAll() error {
	return m.validate(true)
}

func (m *Score) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Stage

	// no validation rules for Name

	// no validation rules for Entrytime

	// no validation rules for Leverage

	// no validation rules for EntryPrice

	// no validation rules for EndPrice

	// no validation rules for OutTime

	// no validation rules for Roe

	// no validation rules for Pnl

	// no validation rules for Commission

	// no validation rules for IsLiquidated

	if len(errors) > 0 {
		return ScoreMultiError(errors)
	}

	return nil
}

// ScoreMultiError is an error wrapping multiple validation errors returned by
// Score.ValidateAll() if the designated constraints aren't met.
type ScoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScoreMultiError) AllErrors() []error { return m }

// ScoreValidationError is the validation error returned by Score.Validate if
// the designated constraints aren't met.
type ScoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScoreValidationError) ErrorName() string { return "ScoreValidationError" }

// Error satisfies the builtin error interface
func (e ScoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScoreValidationError{}
