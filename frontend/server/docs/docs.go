// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "bitmoiigson@gmail.com"
        },
        "license": {
            "name": "CC BY-NC-SA 4.0",
            "url": "https://creativecommons.org/licenses/by-nc-sa/4.0/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/competition": {
            "get": {
                "description": "Get encrypted chart for competition",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chart"
                ],
                "summary": "Get competition chart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of pair names",
                        "name": "names",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.OnePairChart"
                        }
                    }
                }
            },
            "post": {
                "description": "Post score of competition mode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "score"
                ],
                "summary": "Post score",
                "parameters": [
                    {
                        "description": "order inforamtion",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ScoreRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ScoreResponse"
                        }
                    }
                }
            }
        },
        "/freeToken": {
            "post": {
                "description": "request for free token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "erc20"
                ],
                "summary": "Post sendFreeErc20",
                "parameters": [
                    {
                        "description": "eth address",
                        "name": "MetamaskAddressRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MetamaskAddressRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/interval": {
            "get": {
                "description": "Get another interval chart for both of practice and competition",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chart"
                ],
                "summary": "Get another interval chart",
                "parameters": [
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "competition",
                            "practice"
                        ],
                        "type": "string",
                        "name": "mode",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "5m",
                            "15m",
                            "1h",
                            "4h",
                            "1d"
                        ],
                        "type": "string",
                        "name": "reqinterval",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 10,
                        "minimum": 1,
                        "type": "integer",
                        "name": "stage",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.OnePairChart"
                        }
                    }
                }
            }
        },
        "/moreinfo": {
            "get": {
                "description": "Get more infomation of rank",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rank"
                ],
                "summary": "Get moreInfo",
                "parameters": [
                    {
                        "type": "string",
                        "name": "score_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.Score"
                            }
                        }
                    }
                }
            }
        },
        "/myscore/{page}": {
            "get": {
                "description": "Get history of my score",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "score"
                ],
                "summary": "Get myscore",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.Score"
                            }
                        }
                    }
                }
            }
        },
        "/nextBidUnlock": {
            "get": {
                "description": "Get next date of unlock ad bidding",
                "tags": [
                    "erc20"
                ],
                "summary": "Get next unlock date",
                "responses": {
                    "200": {
                        "description": "unix timestamp",
                        "schema": {
                            "$ref": "#/definitions/api.NextUnlockResponse"
                        }
                    }
                }
            }
        },
        "/practice": {
            "get": {
                "description": "Get non encrypted chart for practice",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chart"
                ],
                "summary": "Get practice chart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of pair names",
                        "name": "names",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.OnePairChart"
                        }
                    }
                }
            },
            "post": {
                "description": "Post score of practice mode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "score"
                ],
                "summary": "Post score",
                "parameters": [
                    {
                        "description": "order inforamtion",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ScoreRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ScoreResponse"
                        }
                    }
                }
            }
        },
        "/rank": {
            "post": {
                "description": "Post rank to ranking chart",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rank"
                ],
                "summary": "Post rank",
                "parameters": [
                    {
                        "description": "socre id and comment",
                        "name": "rankInsertRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RankInsertRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/rank/{page}": {
            "get": {
                "description": "Get ranking chart",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rank"
                ],
                "summary": "Get rank",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.RankingBoard"
                            }
                        }
                    }
                }
            }
        },
        "/reissueAccess": {
            "post": {
                "description": "Reissue access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Reissue access token",
                "parameters": [
                    {
                        "description": "refresh token",
                        "name": "ReissueAccessTokenRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ReissueAccessTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ReissueAccessTokenResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Create user api",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "request contains id,pw,nickname,email ...",
                        "name": "CreateUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user/address": {
            "post": {
                "description": "Update metamask address api",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update metamask address",
                "parameters": [
                    {
                        "description": "request contains metamask address",
                        "name": "LoginUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MetamaskAddressRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user/checkId": {
            "get": {
                "description": "Check ID duplication",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Check ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user/checkNickname": {
            "get": {
                "description": "Check nickname duplication",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Check nickname",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nickname",
                        "name": "nickname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Login user api",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "request contains id and pw",
                        "name": "LoginUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.LoginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LoginUserResponse"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "post": {
                "description": "Update profile image api",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update profile image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "profile image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user/verifyEmail": {
            "get": {
                "description": "Check nickname duplication",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Check nickname",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nickname",
                        "name": "nickname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/verifyToken": {
            "post": {
                "description": "Reissue access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Reissue access token",
                "parameters": [
                    {
                        "description": "access token",
                        "name": "VerifyTokenRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.VerifyTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.UserResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.CandleData": {
            "type": "object",
            "properties": {
                "pdata": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.PriceData"
                    }
                },
                "vdata": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.VolumeData"
                    }
                }
            }
        },
        "api.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "nickname",
                "password",
                "user_id"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 1
                },
                "oauth_uid": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "user_id": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 5
                }
            }
        },
        "api.LoginUserRequest": {
            "type": "object",
            "required": [
                "password",
                "user_id"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "user_id": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 5
                }
            }
        },
        "api.LoginUserResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "access_token_expires_at": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "refresh_token_expires_at": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/api.UserResponse"
                }
            }
        },
        "api.MetamaskAddressRequest": {
            "type": "object",
            "required": [
                "addr"
            ],
            "properties": {
                "addr": {
                    "type": "string"
                }
            }
        },
        "api.NextUnlockResponse": {
            "type": "object",
            "properties": {
                "next_unlock": {
                    "type": "integer"
                }
            }
        },
        "api.OnePairChart": {
            "type": "object",
            "properties": {
                "btcratio": {
                    "type": "number"
                },
                "entry_price": {
                    "type": "number"
                },
                "entrytime": {
                    "type": "string"
                },
                "identifier": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "onechart": {
                    "$ref": "#/definitions/api.CandleData"
                }
            }
        },
        "api.OrderResult": {
            "type": "object",
            "properties": {
                "commission": {
                    "type": "number"
                },
                "end_price": {
                    "type": "number"
                },
                "entry_price": {
                    "type": "number"
                },
                "entry_time": {
                    "type": "string"
                },
                "is_liquidated": {
                    "type": "boolean"
                },
                "leverage": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "out_time": {
                    "type": "integer"
                },
                "pnl": {
                    "type": "number"
                },
                "roe": {
                    "type": "number"
                },
                "stage": {
                    "type": "integer"
                }
            }
        },
        "api.PriceData": {
            "type": "object",
            "properties": {
                "close": {
                    "type": "number"
                },
                "high": {
                    "type": "number"
                },
                "low": {
                    "type": "number"
                },
                "open": {
                    "type": "number"
                },
                "time": {
                    "type": "integer"
                }
            }
        },
        "api.RankInsertRequest": {
            "type": "object",
            "required": [
                "score_id"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "score_id": {
                    "type": "string"
                }
            }
        },
        "api.ReissueAccessTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "api.ReissueAccessTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "access_token_expires_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/api.UserResponse"
                }
            }
        },
        "api.ScoreRequest": {
            "type": "object",
            "required": [
                "balance",
                "entry_price",
                "identifier",
                "is_long",
                "leverage",
                "mode",
                "name",
                "quantity",
                "score_id",
                "stage",
                "user_id",
                "waiting_term"
            ],
            "properties": {
                "balance": {
                    "type": "number"
                },
                "entry_price": {
                    "type": "number"
                },
                "identifier": {
                    "type": "string"
                },
                "is_long": {
                    "type": "boolean"
                },
                "leverage": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "loss_price": {
                    "type": "number",
                    "minimum": 0
                },
                "mode": {
                    "type": "string",
                    "enum": [
                        "competition",
                        "practice"
                    ]
                },
                "name": {
                    "type": "string"
                },
                "profit_price": {
                    "type": "number",
                    "minimum": 0
                },
                "quantity": {
                    "type": "number"
                },
                "score_id": {
                    "type": "string"
                },
                "stage": {
                    "type": "integer",
                    "maximum": 10,
                    "minimum": 1
                },
                "user_id": {
                    "type": "string"
                },
                "waiting_term": {
                    "type": "integer",
                    "maximum": 1,
                    "minimum": 1
                }
            }
        },
        "api.ScoreResponse": {
            "type": "object",
            "properties": {
                "origin_chart": {
                    "$ref": "#/definitions/api.CandleData"
                },
                "result_chart": {
                    "$ref": "#/definitions/api.CandleData"
                },
                "score": {
                    "$ref": "#/definitions/api.OrderResult"
                }
            }
        },
        "api.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "password_changed_at": {
                    "type": "string"
                },
                "photo_url": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "api.VerifyTokenRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "api.VolumeData": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "time": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "db.RankingBoard": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "final_balance": {
                    "type": "number"
                },
                "nickname": {
                    "type": "string"
                },
                "photo_url": {
                    "type": "string"
                },
                "score_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.Score": {
            "type": "object",
            "properties": {
                "endprice": {
                    "type": "number"
                },
                "entryprice": {
                    "type": "number"
                },
                "entrytime": {
                    "type": "string"
                },
                "leverage": {
                    "type": "integer"
                },
                "outtime": {
                    "type": "integer"
                },
                "pairname": {
                    "type": "string"
                },
                "pnl": {
                    "type": "number"
                },
                "position": {
                    "type": "string"
                },
                "remain_balance": {
                    "type": "number"
                },
                "roe": {
                    "type": "number"
                },
                "score_id": {
                    "type": "string"
                },
                "stage": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "api.bitmoi.co.kr",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Bitmoi API",
	Description:      "API for Bitmoi service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
