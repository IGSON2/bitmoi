basePath: /
definitions:
  api.CandleData:
    properties:
      pdata:
        items:
          $ref: '#/definitions/api.PriceData'
        type: array
      vdata:
        items:
          $ref: '#/definitions/api.VolumeData'
        type: array
    type: object
  api.CreateUserRequest:
    properties:
      email:
        type: string
      nickname:
        maxLength: 10
        minLength: 1
        type: string
      oauth_uid:
        type: string
      password:
        minLength: 8
        type: string
      user_id:
        maxLength: 15
        minLength: 5
        type: string
    required:
    - email
    - nickname
    - password
    - user_id
    type: object
  api.LoginUserRequest:
    properties:
      password:
        minLength: 8
        type: string
      user_id:
        maxLength: 15
        minLength: 5
        type: string
    required:
    - password
    - user_id
    type: object
  api.LoginUserResponse:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
      refresh_token:
        type: string
      refresh_token_expires_at:
        type: string
      session_id:
        type: string
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.MetamaskAddressRequest:
    properties:
      addr:
        type: string
    required:
    - addr
    type: object
  api.NextUnlockResponse:
    properties:
      next_unlock:
        type: integer
    type: object
  api.OnePairChart:
    properties:
      btcratio:
        type: number
      entry_price:
        type: number
      entrytime:
        type: string
      identifier:
        type: string
      name:
        type: string
      onechart:
        $ref: '#/definitions/api.CandleData'
    type: object
  api.OrderResult:
    properties:
      commission:
        type: number
      end_price:
        type: number
      entry_price:
        type: number
      entry_time:
        type: string
      is_liquidated:
        type: boolean
      leverage:
        type: integer
      name:
        type: string
      out_time:
        type: integer
      pnl:
        type: number
      roe:
        type: number
      stage:
        type: integer
    type: object
  api.PriceData:
    properties:
      close:
        type: number
      high:
        type: number
      low:
        type: number
      open:
        type: number
      time:
        type: integer
    type: object
  api.RankInsertRequest:
    properties:
      comment:
        type: string
      score_id:
        type: string
    required:
    - score_id
    type: object
  api.ReissueAccessTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  api.ReissueAccessTokenResponse:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
      user:
        $ref: '#/definitions/api.UserResponse'
    type: object
  api.ScoreRequest:
    properties:
      balance:
        type: number
      entry_price:
        type: number
      identifier:
        type: string
      is_long:
        type: boolean
      leverage:
        maximum: 100
        minimum: 1
        type: integer
      loss_price:
        minimum: 0
        type: number
      mode:
        enum:
        - competition
        - practice
        type: string
      name:
        type: string
      profit_price:
        minimum: 0
        type: number
      quantity:
        type: number
      score_id:
        type: string
      stage:
        maximum: 10
        minimum: 1
        type: integer
      user_id:
        type: string
      waiting_term:
        maximum: 1
        minimum: 1
        type: integer
    required:
    - balance
    - entry_price
    - identifier
    - is_long
    - leverage
    - mode
    - name
    - quantity
    - score_id
    - stage
    - user_id
    - waiting_term
    type: object
  api.ScoreResponse:
    properties:
      origin_chart:
        $ref: '#/definitions/api.CandleData'
      result_chart:
        $ref: '#/definitions/api.CandleData'
      score:
        $ref: '#/definitions/api.OrderResult'
    type: object
  api.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      nickname:
        type: string
      password_changed_at:
        type: string
      photo_url:
        type: string
      user_id:
        type: string
    type: object
  api.VerifyTokenRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  api.VolumeData:
    properties:
      color:
        type: string
      time:
        type: integer
      value:
        type: number
    type: object
  db.RankingBoard:
    properties:
      comment:
        type: string
      final_balance:
        type: number
      nickname:
        type: string
      photo_url:
        type: string
      score_id:
        type: string
      user_id:
        type: string
    type: object
  db.Score:
    properties:
      endprice:
        type: number
      entryprice:
        type: number
      entrytime:
        type: string
      leverage:
        type: integer
      outtime:
        type: integer
      pairname:
        type: string
      pnl:
        type: number
      position:
        type: string
      remain_balance:
        type: number
      roe:
        type: number
      score_id:
        type: string
      stage:
        type: integer
      user_id:
        type: string
    type: object
host: api.bitmoi.co.kr
info:
  contact:
    email: bitmoiigson@gmail.com
    name: API Support
  description: API for Bitmoi service
  license:
    name: CC BY-NC-SA 4.0
    url: https://creativecommons.org/licenses/by-nc-sa/4.0/
  title: Bitmoi API
  version: "1.0"
paths:
  /competition:
    get:
      description: Get encrypted chart for competition
      parameters:
      - description: Comma-separated list of pair names
        in: query
        name: names
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OnePairChart'
      summary: Get competition chart
      tags:
      - chart
    post:
      consumes:
      - application/json
      description: Post score of competition mode
      parameters:
      - description: order inforamtion
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/api.ScoreRequest'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ScoreResponse'
      summary: Post score
      tags:
      - score
  /freeToken:
    post:
      consumes:
      - application/json
      description: request for free token
      parameters:
      - description: eth address
        in: body
        name: MetamaskAddressRequest
        required: true
        schema:
          $ref: '#/definitions/api.MetamaskAddressRequest'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Post sendFreeErc20
      tags:
      - erc20
  /interval:
    get:
      description: Get another interval chart for both of practice and competition
      parameters:
      - in: query
        name: identifier
        required: true
        type: string
      - enum:
        - competition
        - practice
        in: query
        name: mode
        required: true
        type: string
      - enum:
        - 5m
        - 15m
        - 1h
        - 4h
        - 1d
        in: query
        name: reqinterval
        required: true
        type: string
      - in: query
        maximum: 10
        minimum: 1
        name: stage
        required: true
        type: integer
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OnePairChart'
      summary: Get another interval chart
      tags:
      - chart
  /moreinfo:
    get:
      description: Get more infomation of rank
      parameters:
      - in: query
        name: score_id
        required: true
        type: string
      - in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Score'
            type: array
      summary: Get moreInfo
      tags:
      - rank
  /myscore/{page}:
    get:
      description: Get history of my score
      parameters:
      - description: page number
        in: path
        name: page
        required: true
        type: integer
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Score'
            type: array
      summary: Get myscore
      tags:
      - score
  /nextBidUnlock:
    get:
      description: Get next date of unlock ad bidding
      responses:
        "200":
          description: unix timestamp
          schema:
            $ref: '#/definitions/api.NextUnlockResponse'
      summary: Get next unlock date
      tags:
      - erc20
  /practice:
    get:
      description: Get non encrypted chart for practice
      parameters:
      - description: Comma-separated list of pair names
        in: query
        name: names
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OnePairChart'
      summary: Get practice chart
      tags:
      - chart
    post:
      consumes:
      - application/json
      description: Post score of practice mode
      parameters:
      - description: order inforamtion
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/api.ScoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ScoreResponse'
      summary: Post score
      tags:
      - score
  /rank:
    post:
      description: Post rank to ranking chart
      parameters:
      - description: socre id and comment
        in: body
        name: rankInsertRequest
        required: true
        schema:
          $ref: '#/definitions/api.RankInsertRequest'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Post rank
      tags:
      - rank
  /rank/{page}:
    get:
      description: Get ranking chart
      parameters:
      - description: Page number
        in: path
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.RankingBoard'
            type: array
      summary: Get rank
      tags:
      - rank
  /reissueAccess:
    post:
      consumes:
      - application/json
      description: Reissue access token
      parameters:
      - description: refresh token
        in: body
        name: ReissueAccessTokenRequest
        required: true
        schema:
          $ref: '#/definitions/api.ReissueAccessTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ReissueAccessTokenResponse'
      summary: Reissue access token
      tags:
      - user
  /user:
    post:
      consumes:
      - application/json
      description: Create user api
      parameters:
      - description: request contains id,pw,nickname,email ...
        in: body
        name: CreateUserRequest
        required: true
        schema:
          $ref: '#/definitions/api.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create user
      tags:
      - user
  /user/address:
    post:
      consumes:
      - application/json
      description: Update metamask address api
      parameters:
      - description: request contains metamask address
        in: body
        name: LoginUserRequest
        required: true
        schema:
          $ref: '#/definitions/api.MetamaskAddressRequest'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Update metamask address
      tags:
      - user
  /user/checkId:
    get:
      description: Check ID duplication
      parameters:
      - description: user id
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Check ID
      tags:
      - user
  /user/checkNickname:
    get:
      description: Check nickname duplication
      parameters:
      - description: nickname
        in: query
        name: nickname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Check nickname
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Login user api
      parameters:
      - description: request contains id and pw
        in: body
        name: LoginUserRequest
        required: true
        schema:
          $ref: '#/definitions/api.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.LoginUserResponse'
      summary: Login user
      tags:
      - user
  /user/profile:
    post:
      consumes:
      - application/json
      description: Update profile image api
      parameters:
      - description: profile image
        in: formData
        name: image
        required: true
        type: file
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Update profile image
      tags:
      - user
  /user/verifyEmail:
    get:
      description: Check nickname duplication
      parameters:
      - description: nickname
        in: query
        name: nickname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Check nickname
      tags:
      - user
  /verifyToken:
    post:
      consumes:
      - application/json
      description: Reissue access token
      parameters:
      - description: access token
        in: body
        name: VerifyTokenRequest
        required: true
        schema:
          $ref: '#/definitions/api.VerifyTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserResponse'
      summary: Reissue access token
      tags:
      - user
swagger: "2.0"
